//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BloodPressureForms.CRUDService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CRUDService.ICRUD")]
    public interface ICRUD {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUD/insertPerson", ReplyAction="http://tempuri.org/ICRUD/insertPersonResponse")]
        int insertPerson(BloodPressure.Person p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUD/insertPerson", ReplyAction="http://tempuri.org/ICRUD/insertPersonResponse")]
        System.Threading.Tasks.Task<int> insertPersonAsync(BloodPressure.Person p);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICRUD/insertDiet")]
        void insertDiet(BloodPressure.Diet d);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICRUD/insertDiet")]
        System.Threading.Tasks.Task insertDietAsync(BloodPressure.Diet d);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICRUD/insertMeal")]
        void insertMeal(BloodPressure.Meal m);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICRUD/insertMeal")]
        System.Threading.Tasks.Task insertMealAsync(BloodPressure.Meal m);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICRUD/insertDietMeal")]
        void insertDietMeal(BloodPressure.DietMeal dm);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICRUD/insertDietMeal")]
        System.Threading.Tasks.Task insertDietMealAsync(BloodPressure.DietMeal dm);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICRUD/insertBloodTrack")]
        void insertBloodTrack(BloodPressure.BloodTrack bt, int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICRUD/insertBloodTrack")]
        System.Threading.Tasks.Task insertBloodTrackAsync(BloodPressure.BloodTrack bt, int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUD/viewPersonInfo", ReplyAction="http://tempuri.org/ICRUD/viewPersonInfoResponse")]
        BloodPressure.Person viewPersonInfo(int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUD/viewPersonInfo", ReplyAction="http://tempuri.org/ICRUD/viewPersonInfoResponse")]
        System.Threading.Tasks.Task<BloodPressure.Person> viewPersonInfoAsync(int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUD/viewPersonDiet", ReplyAction="http://tempuri.org/ICRUD/viewPersonDietResponse")]
        string[] viewPersonDiet(int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUD/viewPersonDiet", ReplyAction="http://tempuri.org/ICRUD/viewPersonDietResponse")]
        System.Threading.Tasks.Task<string[]> viewPersonDietAsync(int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUD/viewPersonBloodPressure", ReplyAction="http://tempuri.org/ICRUD/viewPersonBloodPressureResponse")]
        BloodPressure.BloodTrack[] viewPersonBloodPressure(int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUD/viewPersonBloodPressure", ReplyAction="http://tempuri.org/ICRUD/viewPersonBloodPressureResponse")]
        System.Threading.Tasks.Task<BloodPressure.BloodTrack[]> viewPersonBloodPressureAsync(int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUD/getObservers", ReplyAction="http://tempuri.org/ICRUD/getObserversResponse")]
        string[] getObservers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUD/getObservers", ReplyAction="http://tempuri.org/ICRUD/getObserversResponse")]
        System.Threading.Tasks.Task<string[]> getObserversAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICRUD/updatePerson")]
        void updatePerson(BloodPressure.Person p);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICRUD/updatePerson")]
        System.Threading.Tasks.Task updatePersonAsync(BloodPressure.Person p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUD/getSuitableDiet", ReplyAction="http://tempuri.org/ICRUD/getSuitableDietResponse")]
        int getSuitableDiet(float Pressure);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUD/getSuitableDiet", ReplyAction="http://tempuri.org/ICRUD/getSuitableDietResponse")]
        System.Threading.Tasks.Task<int> getSuitableDietAsync(float Pressure);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICRUD/setPersonDiet")]
        void setPersonDiet(int DietID, int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICRUD/setPersonDiet")]
        System.Threading.Tasks.Task setPersonDietAsync(int DietID, int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUD/validName", ReplyAction="http://tempuri.org/ICRUD/validNameResponse")]
        bool validName(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRUD/validName", ReplyAction="http://tempuri.org/ICRUD/validNameResponse")]
        System.Threading.Tasks.Task<bool> validNameAsync(string Name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICRUDChannel : BloodPressureForms.CRUDService.ICRUD, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CRUDClient : System.ServiceModel.ClientBase<BloodPressureForms.CRUDService.ICRUD>, BloodPressureForms.CRUDService.ICRUD {
        
        public CRUDClient() {
        }
        
        public CRUDClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CRUDClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CRUDClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CRUDClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int insertPerson(BloodPressure.Person p) {
            return base.Channel.insertPerson(p);
        }
        
        public System.Threading.Tasks.Task<int> insertPersonAsync(BloodPressure.Person p) {
            return base.Channel.insertPersonAsync(p);
        }
        
        public void insertDiet(BloodPressure.Diet d) {
            base.Channel.insertDiet(d);
        }
        
        public System.Threading.Tasks.Task insertDietAsync(BloodPressure.Diet d) {
            return base.Channel.insertDietAsync(d);
        }
        
        public void insertMeal(BloodPressure.Meal m) {
            base.Channel.insertMeal(m);
        }
        
        public System.Threading.Tasks.Task insertMealAsync(BloodPressure.Meal m) {
            return base.Channel.insertMealAsync(m);
        }
        
        public void insertDietMeal(BloodPressure.DietMeal dm) {
            base.Channel.insertDietMeal(dm);
        }
        
        public System.Threading.Tasks.Task insertDietMealAsync(BloodPressure.DietMeal dm) {
            return base.Channel.insertDietMealAsync(dm);
        }
        
        public void insertBloodTrack(BloodPressure.BloodTrack bt, int PersonID) {
            base.Channel.insertBloodTrack(bt, PersonID);
        }
        
        public System.Threading.Tasks.Task insertBloodTrackAsync(BloodPressure.BloodTrack bt, int PersonID) {
            return base.Channel.insertBloodTrackAsync(bt, PersonID);
        }
        
        public BloodPressure.Person viewPersonInfo(int PersonID) {
            return base.Channel.viewPersonInfo(PersonID);
        }
        
        public System.Threading.Tasks.Task<BloodPressure.Person> viewPersonInfoAsync(int PersonID) {
            return base.Channel.viewPersonInfoAsync(PersonID);
        }
        
        public string[] viewPersonDiet(int PersonID) {
            return base.Channel.viewPersonDiet(PersonID);
        }
        
        public System.Threading.Tasks.Task<string[]> viewPersonDietAsync(int PersonID) {
            return base.Channel.viewPersonDietAsync(PersonID);
        }
        
        public BloodPressure.BloodTrack[] viewPersonBloodPressure(int PersonID) {
            return base.Channel.viewPersonBloodPressure(PersonID);
        }
        
        public System.Threading.Tasks.Task<BloodPressure.BloodTrack[]> viewPersonBloodPressureAsync(int PersonID) {
            return base.Channel.viewPersonBloodPressureAsync(PersonID);
        }
        
        public string[] getObservers() {
            return base.Channel.getObservers();
        }
        
        public System.Threading.Tasks.Task<string[]> getObserversAsync() {
            return base.Channel.getObserversAsync();
        }
        
        public void updatePerson(BloodPressure.Person p) {
            base.Channel.updatePerson(p);
        }
        
        public System.Threading.Tasks.Task updatePersonAsync(BloodPressure.Person p) {
            return base.Channel.updatePersonAsync(p);
        }
        
        public int getSuitableDiet(float Pressure) {
            return base.Channel.getSuitableDiet(Pressure);
        }
        
        public System.Threading.Tasks.Task<int> getSuitableDietAsync(float Pressure) {
            return base.Channel.getSuitableDietAsync(Pressure);
        }
        
        public void setPersonDiet(int DietID, int PersonID) {
            base.Channel.setPersonDiet(DietID, PersonID);
        }
        
        public System.Threading.Tasks.Task setPersonDietAsync(int DietID, int PersonID) {
            return base.Channel.setPersonDietAsync(DietID, PersonID);
        }
        
        public bool validName(string Name) {
            return base.Channel.validName(Name);
        }
        
        public System.Threading.Tasks.Task<bool> validNameAsync(string Name) {
            return base.Channel.validNameAsync(Name);
        }
    }
}
